{
  "swagger": "2.0",
  "info": {
    "description": "## REST API for Delta Exchange\nFind out more on [https://delta.exchange](https://delta.exchange)\n",
    "version": "1.0.0",
    "title": "Delta Exchange Api V2",
    "termsOfService": "https://docs.google.com/document/d/e/2PACX-1vSDARn3b_VlmGZjJjlROm0MFpxX6KoLzVrqPZLSD4rh7sBhpP6kDP8WMSgUlaitwjCBUBd3-fV-MDId/pub",
    "contact": {
      "email": "support@delta.exchange"
    }
  },
  "host": "api.delta.exchange",
  "basePath": "/v2",
  "tags": [
    {
      "name": "Assets",
      "description": "Get Asset List"
    },
    {
      "name": "Indices",
      "description": "Get Indices List"
    },
    {
      "name": "Products",
      "description": "Get Product List"
    },
    {
      "name": "Orders",
      "description": "Placing Orders, Cancelling Orders, Placing batch orders, Cancelling batch orders, Get Open orders, Change Orders Leverage. Rate limits have been introduced recently that allows only set number of operations inside a matching engine in a timeframe. The current rate limits is 500 operations/sec for each product. For ex - placing 50 orders in a batch is equivalent to 50 operations as these orders will be processed by matching engine. Rate limits do not apply when cancelling orders."
    },
    {
      "name": "Positions",
      "description": "Get Open positions, Change Position Margin, Close Position, Close All Position"
    },
    {
      "name": "TradeHistory",
      "description": "Get Orders History, Get Fill History"
    },
    {
      "name": "Orderbook",
      "description": "L2Orderbook"
    },
    {
      "name": "Trades",
      "description": "Get Trades of a contract"
    },
    {
      "name": "Wallet",
      "description": "Get balances, Get transaction history"
    },
    {
      "name": "OHLC Candles",
      "description": "Get price data"
    },
    {
      "name": "Stats",
      "description": "Get Volume Stats"
    },
    {
      "name": "MMP",
      "description": "Market maker protection"
    },
    {
      "name": "Dead Man's Switch (Auto Cancel)",
      "description": "Set up timers for auto orders cancel in case of network malfunctions "
    },
    {
      "name": "Account",
      "description": "Account level settings"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get list of all assets",
        "operationId": "getAssets",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of all assets",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfAssets"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/indices": {
      "get": {
        "tags": [
          "Indices"
        ],
        "operationId": "getIndices",
        "summary": "Get indices",
        "description": "Indices refer to spot price indices that Delta Exchange creates by combining spot prices of prominent crypto exchanges. These indices form the underlying of futures and options contracts listed on Delta Exchange. All details of indices on Delta Exchange are available [here](https://www.delta.exchange/indices).",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of indices",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfIndices"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get list of products",
        "operationId": "getProducts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contract_types",
            "description": "Comma separated list of contract types e.g. futures,perpetual_futures,call_options, put_options, interest_rate_swaps,move_options,spreads, turbo_call_options, turbo_put_options, spot",
            "type": "string"
          },
          {
            "in": "query",
            "name": "states",
            "description": "Comma separated list of states e.g. upcoming,live,expired,settled to get expired contracts https://api.delta.exchange/v2/products?contract_types=call_options&states=expired ",
            "type": "string"
          },
          {
            "in": "query",
            "name": "after",
            "description": "after cursor for paginated request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "before",
            "description": "before cursor for paginated request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "size of a single page for paginated request, default: 100",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfProducts"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/products/{symbol}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product by symbol",
        "operationId": "getProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol",
            "description": "symbol of the desired product",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/Product"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/tickers": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get tickers for products",
        "operationId": "getTickers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contract_types",
            "in": "query",
            "description": "Comma separated list of contract types e.g. futures,perpetual_futures,call_options, put_options, interest_rate_swaps,move_options,spreads, turbo_call_options, turbo_put_options, spot",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of live tickers for all products, including IV for option strikes",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfTickers"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/tickers/{symbol}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get ticker for a product by symbol",
        "operationId": "getTicker",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol",
            "description": "symbol of the ticker",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ticker data for requested product, including IV for option strikes",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/Ticker"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Place Order",
        "operationId": "placeOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "order",
            "description": "Order which needs to be created. Rate limits apply.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns back the order object with assigned id and latest state",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/Order"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Returns [error](#place-order-error-description) if order could not be placed",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel Order",
        "operationId": "cancelOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "order",
            "description": "Order which needs to be cancelled",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns back the order object",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/Order"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Returns error if order could not be cancelled",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Edit Order",
        "operationId": "editOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "order",
            "description": "Order which needs to be edited. Rate limits apply.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns back the order object with assigned id and latest state",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/Order"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Returns [error](#place-order-error-description) if order could not be placed",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      },
      "get": {
        "summary": "Get Active Orders",
        "tags": [
          "Orders"
        ],
        "operationId": "getOrders",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "product_ids",
            "description": "comma separated product ids, if not specified, all the orders will be returned",
            "type": "string"
          },
          {
            "in": "query",
            "name": "states",
            "description": "comma separated list of states - open,pending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "contract_types",
            "description": "comma separated list of desired contract types, if not specified any parameters then, all the orders will be returned",
            "type": "string",
            "enum":[
              "futures",
              "perpetual_futures",
              "call_options",
              "put_options"
            ]
          },
          {
            "in": "query",
            "name": "order_types",
            "description": "comma separated order types",
            "type": "string",
            "enum": [
              "market",
              "limit",
              "stop_market",
              "stop_limit",
              "all_stop"
            ]
          },
          {
            "in": "query",
            "name": "start_time",
            "description": "from time in micro-seconds in epoc; referring to the order creation time",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "end_time",
            "description": "from time in micro-seconds in epoc; referring to the order creation time",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "after",
            "description": "after cursor for pagination",
            "type": "string"
          },
          {
            "in": "query",
            "name": "before",
            "description": "before cursor for pagination",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "number of records per page",
            "type": "integer",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "List of orders as per the query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfOrders"
                    },
                    "meta": {
                      "$ref": "#/definitions/PaginationMeta"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/orders/bracket": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Place Bracket order",
        "description": "A bracket order is a set of TP and SL order. For a bracket order , size need not be specified as it closes the entire position. For a given contract, you can have multiple bracket orders for open orders but only a single bracket order for any open position.",
        "operationId": "bracketOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "order",
            "description": "Bracket Order which needs to be updated ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBracketOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns back success response",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          },
          "400": {
            "description": "Returns error if orders could not be updated",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Edit Bracket order",
        "description": "A bracket order is a set of TP and SL order. You can specify bracket order with an order that will create a new position. Use this api to change the bracket params attached with an order.",
        "operationId": "bracketOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "order",
            "description": "Bracket Order which needs to be updated ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditBracketOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns back success response",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          },
          "400": {
            "description": "Returns error if orders could not be updated",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/orders/all": {
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel all open orders",
        "description": "Cancels all orders for a given product id. If product id is not provided, it cancels orders for provided contract types. If none of them are provided, it cancels all the orders. Provide either product id or list of contract types at a time. If both are provided, contract types will be ignored.",
        "operationId": "cancelAllOrders",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "filters",
            "description": "Filters for selecting orders that needs to be cancelled",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CancelAllFilterObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns back success response",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          },
          "400": {
            "description": "Returns error if orders could not be cancelled",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/orders/batch": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create batch orders",
        "description": "Orders in a batch should belong to the same contract. Max allowed size limit in a batch is 50. Rate limits apply. Please note that fok and ioc are not valid time in force values for creating batch orders.",
        "operationId": "batchCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "orders": {
                  "$ref": "#/definitions/ArrayOfBatchCreateOrderRequest"
                },
                "product_id": {
                  "type": "integer"
                }
              }
            },
            "description": "Does not support time_in_force flag for orders, All orders in batch create are assumed to be gtc orders. batch create does not support stop orders, it support only limit orders"
          }
        ],
        "responses": {
          "200": {
            "description": "returns the orders placed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfOrders"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "returns error if orders couldnt be placed",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Orders to be edited in a batch. Rate limits apply.",
        "summary": "Edit batch orders",
        "tags": [
          "Orders"
        ],
        "operationId": "batchEdit",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "orders": {
                  "$ref": "#/definitions/ArrayOfEditOrderRequest"
                },
                "product_id": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of edited orders",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfOrders"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "returns error if orders couldnt be edited",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete batch orders",
        "operationId": "batchDelete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "orders": {
                  "$ref": "#/definitions/ArrayOfDeleteOrderRequest"
                },
                "product_id": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns the orders deleted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfOrders"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "returns error if orders couldnt be deleted",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/orders/cancel_after": {
      "post": {
        "tags": [
          "Dead Man's Switch (Auto Cancel)"
        ],
        "summary": "Cancel After",
        "operationId": "cancelAfter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "cancel after details",
            "description": "cancel after details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelAfterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns back the cancel_after configs set",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CancelAfterResponse"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Returns if configs couldnt be set",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/orders/{order_id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order by id",
        "operationId": "getOrderById",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "order_id",
            "description": "Id of the order",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns back the order object with assigned id and latest state",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/Order"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/orders/client_order_id/{client_oid}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order by client oid",
        "operationId": "getOrderByCOI",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "client_oid",
            "description": "Client provided order id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns back the order object with assigned client order id and latest state",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/Order"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/products/{product_id}/orders/leverage": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Change order leverage",
        "operationId": "changeOrderLeverage",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "order_leverage",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "leverage"
              ],
              "properties": {
                "leverage": {
                  "type": "string"
                }
              }
            }
          },
          {
            "in": "path",
            "name": "product_id",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns the OrderLeverage object",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/OrderLeverage"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Returns error if leverage couldnt be changed",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get order leverage",
        "operationId": "getOrderLeverage",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "product_id",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns the OrderLeverage object",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/OrderLeverage"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/orders/history": {
      "get": {
        "tags": [
          "TradeHistory"
        ],
        "summary": "Get order history (cancelled and closed)",
        "operationId": "getOrderHistory",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "product_ids",
            "description": "comma separated product ids",
            "type": "string"
          },
          {
            "in": "query",
            "name": "contract_types",
            "description": "comma separated list of desired contract types",
            "type": "string"
          },
          {
            "in": "query",
            "name": "order_types",
            "description": "comma separated order types",
            "type": "string",
            "enum": [
              "market",
              "limit",
              "stop_market",
              "stop_limit",
              "all_stop"
            ]
          },
          {
            "in": "query",
            "name": "start_time",
            "description": "from time in micro-seconds in epoc",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "end_time",
            "description": "from time in micro-seconds in epoc",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "after",
            "description": "after cursor for pagination",
            "type": "string"
          },
          {
            "in": "query",
            "name": "before",
            "description": "before cursor for pagination",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "number of records per page",
            "type": "integer",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "List of closed and cancelled orders",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfOrders"
                    },
                    "meta": {
                      "$ref": "#/definitions/PaginationMeta"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/fills": {
      "get": {
        "summary": "GET user fills by filters",
        "tags": [
          "TradeHistory"
        ],
        "operationId": "getUserfills",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "product_ids",
            "description": "comma separated product ids",
            "type": "string"
          },
          {
            "in": "query",
            "name": "contract_types",
            "description": "comma separated list of desired contract types",
            "type": "string"
          },
          {
            "in": "query",
            "name": "start_time",
            "description": "from time in micro-seconds in epoc",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "end_time",
            "description": "from time in micro-seconds in epoc",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "after",
            "description": "after cursor for pagination",
            "type": "string"
          },
          {
            "in": "query",
            "name": "before",
            "description": "before cursor for pagination",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "number of records per page",
            "type": "integer",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "fills",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfFills"
                    },
                    "meta": {
                      "$ref": "#/definitions/PaginationMeta"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/fills/history/download/csv": {
      "get": {
        "tags": [
          "TradeHistory"
        ],
        "summary": "Download Fills history",
        "operationId": "downloadFillsHistory",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "product_ids",
            "description": "comma separated product ids",
            "type": "string"
          },
          {
            "in": "query",
            "name": "contract_types",
            "description": "comma separated list of desired contract types",
            "type": "string"
          },
          {
            "in": "query",
            "name": "start_time",
            "description": "from time in micro-seconds in epoc",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "end_time",
            "description": "from time in micro-seconds in epoc",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "csv of fills for the filter query"
          }
        }
      }
    },
    "/positions/margined": {
      "get": {
        "description": "Change in position may take upto 10secs to reflect. Use 'GET /position' for real-time data.",
        "tags": [
          "Positions"
        ],
        "operationId": "getMarginedPositions",
        "summary": "Get margined positions",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "product_ids",
            "description": "comma separated product ids. If not specified any parameters, all the open positions will be returned",
            "type": "string"
          },
          {
            "in": "query",
            "name": "contract_types",
            "description": "comma separated list of desired contract types. If not specified any parameters then, all the open positions will be returned",
            "type": "string",
            "enum":[
              "futures",
              "perpetual_futures",
              "call_options",
              "put_options"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of all open positions",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfPositions"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/positions": {
      "get": {
        "description": "Get real-time positions data.",
        "tags": [
          "Positions"
        ],
        "operationId": "getPositions",
        "summary": "Get position",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "id of the product"
          },
          {
            "name": "underlying_asset_symbol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Underlying asset symbol. e.g. 'BTC', 'ETH'. This gives a list of all positions in products which have the given underlying asset"
          }
        ],
        "responses": {
          "200": {
            "description": "Open position for the give product id",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "size": {
                          "type": "integer",
                          "description": "Position size, negative for short and positive for long"
                        },
                        "entry_price": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/positions/auto_topup": {
      "put": {
        "tags": [
          "Positions"
        ],
        "operationId": "changeAutoTopup",
        "summary": "Auto Topup",
        "description": "Changes position auto topup flag. Positions automatically inherits auto topup flag of the account. If account level auto topop is set to false, use this api to change auto topup flag for individual positions.",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "auto_topup",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "product_id",
                "auto_topup"
              ],
              "properties": {
                "product_id": {
                  "type": "integer"
                },
                "auto_topup": {
                  "type": "boolean",
                  "default": "false"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns the position object",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/Position"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Returns error if position margin could not be changed",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/positions/change_margin": {
      "post": {
        "tags": [
          "Positions"
        ],
        "operationId": "changePositionMargin",
        "summary": "Add/Remove position margin",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "position_margin",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "product_id",
                "delta_margin"
              ],
              "properties": {
                "product_id": {
                  "type": "integer"
                },
                "delta_margin": {
                  "type": "string",
                  "description": "Delta in the position margin, positive in case of adding margin & negative in case of removing margin"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns the position object",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/Position"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Returns error if position margin could not be changed",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/positions/close_all": {
      "post": {
        "tags": [
          "Positions"
        ],
        "operationId": "closeAllPosition",
        "summary": "Close all positions ",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "close_all",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "close_all_portfolio",
                "close_all_isolated",
                "user_id"
              ],
              "properties": {
                "close_all_portfolio": {
                  "type": "boolean"
                },
                "close_all_isolated": {
                  "type": "boolean"
                },
                "user_id": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns back success response",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          },
          "400": {
            "description": "Returns error if not able to close all positions",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/l2orderbook/{symbol}": {
      "get": {
        "tags": [
          "Orderbook"
        ],
        "operationId": "getL2Orderbook",
        "summary": "Get L2 orderbook",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "depth",
            "description": "number of levels on each side",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "L2 orderbook for the product",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/L2Orderbook"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/trades/{symbol}": {
      "get": {
        "tags": [
          "Trades"
        ],
        "operationId": "getTrades",
        "summary": "Get public trades",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "symbol",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of recent trades of the product",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/Trades"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/wallet/balances": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "operationId": "getBalances",
        "summary": "Get Wallet Balances",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of wallets attached to the user account",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfWallets"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/wallet/transactions": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get Wallet transactions",
        "operationId": "getTransactions",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "asset_ids",
            "description": "comma separated list of asset_ids for which to get txns logs",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "start_time",
            "description": "from time in micro-seconds in epoc",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "end_time",
            "description": "from time in micro-seconds in epoc",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "after",
            "description": "after cursor for pagination",
            "type": "string"
          },
          {
            "in": "query",
            "name": "before",
            "description": "before cursor for pagination",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "number of records per page",
            "type": "integer",
            "default": 10
          },
          {
            "in": "query",
            "name": "transaction_types",
            "description": "transaction types to retrieve",
            "type": "string_array",
            "schema": {
              "$ref": "#/definitions/TransactionTypes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of transactions for that wallet",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfTransactions"
                    },
                    "meta": {
                      "$ref": "#/definitions/PaginationMeta"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/wallet/transactions/download": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Download Wallet transactions",
        "operationId": "downloadTransactions",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "asset_ids",
            "description": "comma separated list of asset_ids",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "start_time",
            "description": "from time in micro-seconds in epoc",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "end_time",
            "description": "from time in micro-seconds in epoc",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "after",
            "description": "after cursor for pagination",
            "type": "string"
          },
          {
            "in": "query",
            "name": "before",
            "description": "before cursor for pagination",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "number of records per page",
            "type": "integer",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "csv of transactions for that wallet"
          }
        }
      }
    },
    "/wallets/sub_account_balance_transfer": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Request asset transfer",
        "description": "This api transfers asset from one subaccount to another subaccount or to the main/parent account. Please ensure that the subaccounts involved in the transfer should belong to the same parent account. Requests to transfer assets across subaccounts that belong to different parent accounts will fail. Please make sure that the api key used to make this api request belongs to the main/parent account.",
        "operationId": "assetTransfer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "assetTransfer",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetTransferSubaccountReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success message",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Returns error code",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/wallets/sub_accounts_transfer_history": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Request subaccount balance transfer history.",
        "description": "This api returns the wallet balance transfers for subaccounts belonging to the parent/main account of an api user. Make sure you are calling this api from the main account. If no subaccount is mentioned in the request, data for all the subacounts will be returned. Use page size to get more entries in a single request.",
        "operationId": "SubaccountTransferHistory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "subaccountTransferHistory",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubaccountTransferHistory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success message",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfSubaccountTransferLog"
                    },
                    "meta": {
                      "$ref": "#/definitions/PaginationMeta"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Returns error code",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/products/?states=expired": {
      "get": {
        "tags": [
          "Settlement Prices"
        ],
        "summary": "Get product settlement prices",
        "operationId": "getProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "states",
            "description": "Comma separated list of states e.g. to get expired contracts https://api.delta.exchange/v2/products?contract_types=call_options&states=expired ",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "size of a single page for paginated request, default: 100",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/Product"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/history/candles": {
      "get": {
        "summary": "GET ohlc candles",
        "tags": [
          "Historical data/ OHLC Candles"
        ],
        "operationId": "getCandles",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "resolution",
            "type": "string",
            "description": "",
            "enum": [
              "1m","3m","5m","15m","30m","1h","2h","4h","6h","1d","7d","30d","1w","2w"
            ],
            "required": true
          },
          {
            "in": "query",
            "name": "symbol",
            "type": "string",
            "description": "To get index data pass index symbol like .DEXBTUSDT/ .DEETHUSDT, to get funding history in the same api pass symbol as FUNDING:${symbol} ,for mark price MARK:${symbol}, and for OI data OI:${symbol}",
            "required": true
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start time: unix timestamp in seconds",
            "type": "integer",
            "required": true
          },
          {
            "in": "query",
            "name": "end",
            "description": "End time: unix timestamp in seconds",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ohlc",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfOHLCData"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/history/sparklines": {
      "get": {
        "summary": "GET product history sparkline",
        "tags": [
          "Historical data/ OHLC Candles"
        ],
        "operationId": "getSparklines",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbols",
            "type": "string",
            "description": "comma separated product symbols",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "product history sparkline",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/SparklineData"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/stats": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get volume stats",
        "operationId": "getStat",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "sum of turnover in the last 7 and 30 days along with  Total Volume in the last 24 hours (in USD)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/Stats"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/users/update_mmp": {
      "put": {
        "tags": [
          "MMP"
        ],
        "summary": "Update MMP config",
        "operationId": "updateMMP",
        "description": "Channel provides updates when MMP is triggered. Market maker protection is available to registered market makers by default. Others can reach out to support for getting access to MMP. More info [here](https://guides.delta.exchange/delta-exchange-user-guide/market-makers-guide/market-maker-protection).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "mmp_config",
            "description": "mmp config for a given underlying asset",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MMPConfigUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns back the User Preference which contains mmp config",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/UserPreference"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Returns error if mmp is not enabled on the account",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/users/reset_mmp": {
      "put": {
        "tags": [
          "MMP"
        ],
        "summary": "Reset MMP",
        "operationId": "resetMMP",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "reset_mmp",
            "description": "reset mmp config for a given underlying asset",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MMPResetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns back the User Preference which contains mmp config",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          },
          "400": {
            "description": "Returns error if mmp is not enabled on the account",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/users/trading_preferences": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get users trading preferences",
        "operationId": "getTradingPreferences",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "responses": {
          "200": {
            "description": "User trading preferences attached to the account",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/UserPreference"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/sub_accounts": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get subaccounts",
        "description": "This api returns all the subaccounts belonging to the same parent/main user. Make sure to call this api from the parent user.",
        "operationId": "getSubaccounts",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "responses": {
          "200": {
            "description": "Subaccounts belonging to the same parent account.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ArrayOfSubaccouns"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get user",
        "description": "This api returns the user object.",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "api-key": [],
            "signature": [],
            "timestamp": []
          }
        ],
        "responses": {
          "200": {
            "description": "User Object",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiSuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/User"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api-key": {
      "type": "apiKey",
      "name": "api-key",
      "in": "header"
    },
    "signature": {
      "type": "apiKey",
      "name": "signature",
      "in": "header"
    },
    "timestamp": {
      "type": "apiKey",
      "name": "timestamp",
      "in": "header"
    }
  },
  "definitions": {
    "ApiSuccessResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "ApiErrorResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "default": false
        },
        "error": {
          "type": "object"
        }
      }
    },
    "Index": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "symbol": {
          "type": "string"
        },
        "constituent_exchanges": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "underlying_asset_id": {
          "type": "integer",
          "description": "Asset ID for base symbol"
        },
        "quoting_asset_id": {
          "type": "integer",
          "description": "Asset ID for quoting symbol"
        },
        "index_type": {
          "type": "string",
          "description": "Type of index",
          "enum": [
            "spot_pair",
            "fixed_interest_rate",
            "floating_interest_rate"
          ]
        }
      }
    },
    "ArrayOfIndices": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Index"
      }
    },
    "Asset": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "symbol": {
          "type": "string"
        },
        "precision": {
          "type": "integer"
        },
        "deposit_status": {
          "type": "string",
          "enum": ["enabled", "disabled"]
        },
        "withdrawal_status": {
          "type": "string",
          "enum": ["enabled", "disabled"]
        },
        "base_withdrawal_fee": {
          "type": "string"
        },
        "min_withdrawal_amount": {
          "type": "string",
          "description": "Minimum value of allowed withdrawal"
        }
      }
    },
    "ArrayOfAssets": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Asset"
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "id of a product or a contract"
        },
        "symbol": {
          "type": "string",
          "description": "symbol of a product or a contract e.g. LINKBTC, XRPUSDQ"
        },
        "description": {
          "type": "string",
          "description": "description of a product or a contract"
        },
        "created_at": {
          "type": "string",
          "description": "product/contract creation date and time"
        },
        "updated_at": {
          "type": "string",
          "description": "product/contract update date and time"
        },
        "settlement_time": {
          "type": "string",
          "description": "settlement Timestamp of futures contract"
        },
        "notional_type": {
          "type": "string",
          "enum": [
            "vanilla",
            "inverse"
          ],
          "description": "whether notional is calculated using vanilla math or inverse math"
        },
        "impact_size": {
          "type": "integer",
          "description": "size of a typical trade. Used in the computation of mark price"
        },
        "initial_margin": {
          "type": "integer",
          "description": "The amount required to enter into a new position"
        },
        "maintenance_margin": {
          "type": "string",
          "description": "The amount necessary when a loss on a futures position requires you to allocate more funds to return the margin to the initial margin level. "
        },
        "contract_value": {
          "type": "string",
          "description": "The notional value of a futures contract is simply the spot price of the asset multiplied by the amount of the asset specified in the contract"
        },
        "contract_unit_currency": {
          "type": "string",
          "description": "This is the unit of  1 contract, for vanilla futures, its underlying asset. for inverse, it is settling asset. for quanto, its settling asset / quoting asset"
        },
        "tick_size": {
          "type": "string",
          "description": "The minimum gap between 2 consecutive prices."
        },
        "product_specs": {
          "type": "object",
          "description": "Specs related to specific contract types (IRS indices, options volatility limits)"
        },
        "state": {
          "type": "string",
          "enum": [
            "live",
            "expired",
            "upcoming"
          ],
          "description": "current state of the product"
        },
        "trading_status": {
          "type": "string",
          "enum": [
            "operational",
            "disrupted_cancel_only",
            "disrupted_post_only"
          ],
          "description": "trading status of the contract e.g. 'operational','disrupted_cancel_only' or 'disrupted_post_only' "
        },
        "max_leverage_notional": {
          "type": "string",
          "description": "maximum notional position size (in settling asset terms) that can be acquired at highest allowed leverage for a given contract."
        },
        "default_leverage": {
          "type": "string",
          "description": "default leverage"
        },
        "initial_margin_scaling_factor": {
          "type": "string"
        },
        "maintenance_margin_scaling_factor": {
          "type": "string"
        },
        "taker_commission_rate": {
          "type": "string",
          "description": "rate at which commission fee will be calculated for a taker trade in given contract"
        },
        "maker_commission_rate": {
          "type": "string",
          "description": "rate at which maker rebate will be calculated"
        },
        "liquidation_penalty_factor": {
          "type": "string",
          "description": "Determines liquidation charge as per the following formula: liquidation_penalty_factor * minimum maintenance margin"
        },
        "contract_type": {
          "type": "string",
          "description": " Type of contracts e.g. futures, perpetual futures, "
        },
        "position_size_limit": {
          "type": "integer",
          "description": "Maximum size of contracts in a single order can be placed"
        },
        "basis_factor_max_limit": {
          "type": "string",
          "description": "Maximum allowed value of annualized basis"
        },
        "is_quanto": {
          "type": "boolean",
          "description": "Flag which denotes whether future contract is quanto or not"
        },
        "funding_method": {
          "type": "string",
          "description": "Method used to calculate funding for given contract. e.g. Fixed or mark price"
        },
        "annualized_funding": {
          "type": "string",
          "description": "Maximum allowed value of funding, expressed as annual rate."
        },
        "price_band": {
          "type": "string",
          "description": "the range around mark price in which trading is allowed. This number is in percentage."
        },
        "underlying_asset": {
          "$ref": "#/definitions/Asset"
        },
        "quoting_asset": {
          "$ref": "#/definitions/Asset"
        },
        "settling_asset": {
          "$ref": "#/definitions/Asset"
        },
        "spot_index": {
          "$ref": "#/definitions/Index"
        }
      }
    },
    "ProductCategories": {
      "type": "object",
      "description": "List of all the product category names on delta exchange. Please refer to this list while subscribing to various public and private channels on delta exchange websocket",
      "properties": {
        "PutOptions": {
          "type": "string",
          "description": "put_options"
        },
        "CallOptions": {
          "type": "string",
          "description": "call_options"
        },
        "MoveOptions": {
          "type": "string",
          "description": "move_options"
        },
        "Spot": {
          "type": "string",
          "description": "spot"
        },
        "Futures": {
          "type": "string",
          "description": "futures"
        },
        "Perpetual Futures": {
          "type": "string",
          "description": "perpetual_futures"
        }
      }
    },
    "ArrayOfProducts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Product"
      }
    },
    "Order": {
      "type": "object",
      "description": "An Order object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        },
        "size": {
          "type": "integer"
        },
        "unfilled_size": {
          "type": "integer"
        },
        "side": {
          "type": "string",
          "description": "side for which to place order",
          "enum": [
            "buy",
            "sell"
          ]
        },
        "order_type": {
          "type": "string",
          "enum": [
            "limit_order",
            "market_order"
          ]
        },
        "limit_price": {
          "type": "string"
        },
        "stop_order_type": {
          "type": "string",
          "enum": [
            "stop_loss_order"
          ]
        },
        "stop_price": {
          "type": "string"
        },
        "paid_commission": {
          "type": "string",
          "description": "Commission paid for filled order"
        },
        "commission": {
          "type": "string",
          "description": "Commission blocked for order"
        },
        "close_on_trigger": {
          "type": "string",
          "enum": [
            "false",
            "true"
          ]
        },
        "client_order_id": {
          "type": "string",
          "description": "client order id provided by the user while creating order"
        },
        "state": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "open",
            "pending",
            "closed",
            "cancelled"
          ]
        },
        "created_at": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "product_symbol": {
          "type": "string"
        }
      }
    },
    "ArrayOfOrders": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Order"
      }
    },
    "CreateOrderRequest": {
      "type": "object",
      "description": "A create order object",
      "required": [
        "product_id"
      ],
      "properties": {
        "product_id": {
          "type": "integer"
        },
        "limit_price": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "side": {
          "type": "string",
          "description": "side for which to place order",
          "enum": [
            "buy",
            "sell"
          ]
        },
        "order_type": {
          "type": "string",
          "enum": [
            "limit_order",
            "market_order"
          ]
        },
        "stop_order_type": {
          "type": "string",
          "enum": [
            "stop_loss_order",
            "take_profit_order"
          ]
        },
        "stop_price": {
          "type": "string"
        },
        "trail_amount": {
          "type": "string"
        },
        "stop_trigger_method": {
          "type": "string",
          "enum": [
            "mark_price", "last_traded_price", "spot_price"
          ]
        },
        "bracket_stop_loss_limit_price": {
          "type": "string"
        },
        "bracket_stop_loss_price": {
          "type": "string"
        },
        "bracket_take_profit_limit_price": {
          "type": "string"
        },
        "bracket_take_profit_price": {
          "type": "string"
        },
        "time_in_force": {
          "type": "string",
          "enum": [
            "gtc",
            "ioc",
            "fok"
          ]
        },
        "mmp": {
          "type": "string",
          "enum": [
            "disabled",
            "mmp1",
            "mmp2",
            "mmp3",
            "mmp4",
            "mmp5"
          ]
        },
        "post_only": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "reduce_only": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "close_on_trigger": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "client_order_id": {
          "type": "string"
        }
      }
    },
    "BatchCreateOrderRequest": {
      "type": "object",
      "description": "A create order object",
      "required": [
        "product_id"
      ],
      "properties": {
        "product_id": {
          "type": "integer"
        },
        "limit_price": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "side": {
          "type": "string",
          "description": "side for which to place order",
          "enum": [
            "buy",
            "sell"
          ]
        },
        "order_type": {
          "type": "string",
          "enum": [
            "limit_order",
            "market_order"
          ]
        },
        "stop_order_type": {
          "type": "string",
          "enum": [
            "stop_loss_order",
            "take_profit_order"
          ]
        },
        "stop_price": {
          "type": "string"
        },
        "trail_amount": {
          "type": "string"
        },
        "stop_trigger_method": {
          "type": "string",
          "enum": [
            "mark_price", "last_traded_price", "spot_price"
          ]
        },
        "bracket_stop_loss_limit_price": {
          "type": "string"
        },
        "bracket_stop_loss_price": {
          "type": "string"
        },
        "bracket_take_profit_limit_price": {
          "type": "string"
        },
        "bracket_take_profit_price": {
          "type": "string"
        },
        "time_in_force": {
          "type": "string",
          "enum": [
            "gtc"
          ]
        },
        "mmp": {
          "type": "string",
          "enum": [
            "disabled",
            "mmp1",
            "mmp2",
            "mmp3",
            "mmp4",
            "mmp5"
          ]
        },
        "post_only": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "reduce_only": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "close_on_trigger": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "client_order_id": {
          "type": "string"
        }
      }
    },
    "ArrayOfBatchCreateOrderRequest": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/BatchCreateOrderRequest"
      }
    },
    "ArrayOfCreateOrderRequest": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CreateOrderRequest"
      }
    },
    "EditOrderRequest": {
      "type": "object",
      "description": "edit order object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "limit_price": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "description": "total size after editing order"
        },
        "mmp": {
          "type": "string",
          "enum": [
            "disabled",
            "mmp1",
            "mmp2",
            "mmp3",
            "mmp4",
            "mmp5"
          ]
        },
        "post_only": {
          "type": "string",
          "enum": [
            "false",
            "true"
          ]
        }
      }
    },
    "ArrayOfEditOrderRequest": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/EditOrderRequest"
      }
    },
    "CreateBracketOrderRequest": {
      "type": "object",
      "description": "bracket order object",
      "properties": {
        "product_id": {
          "type": "integer",
          "required": true
        },
        "stop_loss_order": {
          "type": "object",
          "properties": {
            "order_type": {
              "type": "string",
              "enum": ["limit_order", "market_order"]
            },
            "stop_price": {
              "type": "string"
            },
            "trail_amount": {
              "type": "string",
              "description": "Use trail amount if you want a trailing stop order. Required if stop price is empty."
            },
            "limit_price": {
              "type": "string",
              "description": "Required if its a limit order"
            }
          }
        },
        "take_profit_order": {
          "type": "object",
          "properties": {
            "order_type": {
              "type": "string",
              "enum": ["limit_order", "market_order"]
            },
            "stop_price": {
              "type": "string"
            },
            "limit_price": {
              "type": "string",
              "description": "Required if its a limit order"
            }
          }
        },
        "stop_trigger_method": {
          "type": "string",
          "enum": [
            "mark_price",
            "last_traded_price",
            "spot_price"
          ]
        }
      }
    },
    "EditBracketOrderRequest": {
      "type": "object",
      "description": "bracket order object",
      "properties": {
        "id": {
          "type": "integer",
          "required": true,
          "description": "Order ID for which bracket params are being updated"
        },
        "product_id": {
          "type": "integer",
          "required": true
        },
        "bracket_stop_loss_limit_price": {
          "type": "string"
        },
        "bracket_stop_loss_price": {
          "type": "string"
        },
        "bracket_take_profit_limit_price": {
          "type": "string"
        },
        "bracket_take_profit_price": {
          "type": "string"
        },
        "bracket_trail_amount": {
          "type": "string"
        }
      }
    },
    "DeleteOrderRequest": {
      "type": "object",
      "description": "A delete order object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        }
      }
    },
    "CancelAllFilterObject": {
      "type": "object",
      "description": "Cancel all request filter object",
      "properties": {
        "product_id": {
          "type": "integer",
          "description": "cancel all orders for particular product, cancels orders for all products if not provided"
        },
        "contract_types": {
          "type": "string",
          "description": "comma separated list of desired contract types"
        },
        "cancel_limit_orders": {
          "type": "string",
          "description": "set as true to cancel open limit orders",
          "enum": [
            "true",
            "false"
          ]
        },
        "cancel_stop_orders": {
          "type": "string",
          "description": "set as true to cancel stop orders",
          "enum": [
            "true",
            "false"
          ]
        }
      }
    },
    "ArrayOfDeleteOrderRequest": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DeleteOrderRequest"
      }
    },
    "Position": {
      "type": "object",
      "description": "A position object",
      "properties": {
        "user_id": {
          "type": "integer"
        },
        "size": {
          "type": "integer",
          "description": "Position size, negative for short and positive for long"
        },
        "entry_price": {
          "type": "string"
        },
        "margin": {
          "type": "string"
        },
        "liquidation_price": {
          "type": "string"
        },
        "bankruptcy_price": {
          "type": "string"
        },
        "adl_level": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "product_symbol": {
          "type": "string"
        },
        "commission": {
          "type": "string",
          "description": "commissions blocked in the position"
        },
        "realized_pnl": {
          "type": "string",
          "description": "Net realized pnl since the position was opened"
        },
        "realized_funding": {
          "type": "string",
          "description": "Net realized funding since the position was opened"
        }
      }
    },
    "ArrayOfPositions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Position"
      }
    },
    "Fill": {
      "type": "object",
      "description": "A fill object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "size": {
          "type": "integer"
        },
        "fill_type":{
          "type": "string",
          "enum": [
            "normal",
            "adl"
          ]
        },
        "side": {
          "type": "string",
          "enum": [
            "buy",
            "sell"
          ]
        },
        "price": {
          "type": "string",
          "description": "Price at which the fill happened, BigDecimal sent as string"
        },
        "role": {
          "type": "string",
          "enum": [
            "taker",
            "maker"
          ]
        },
        "commission": {
          "type": "string",
          "description": "Commission paid on this fill, negative value means commission was earned because of maker role"
        },
        "created_at": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "product_symbol": {
          "type": "string"
        },
        "order_id": {
          "type": "string"
        },
        "settling_asset_id": {
          "type": "integer"
        },
        "settling_asset_symbol": {
          "type": "string"
        },
        "meta_data": {
          "$ref": "#/definitions/FillMetaData"
        }
      }
    },
    "ArrayOfFills": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Fill"
      }
    },
    "FillMetaData": {
      "type": "object",
      "description": "Meta data inside fill",
      "properties": {
        "commission_deto": {
          "type": "string"
        },
        "commission_deto_in_settling_asset": {
          "type": "string"
        },
        "effective_commission_rate": {
          "type": "string"
        },
        "liquidation_fee_deto": {
          "type": "string"
        },
        "liquidation_fee_deto_in_settling_asset": {
          "type": "string"
        },
        "order_price": {
          "type": "string"
        },
        "order_size": {
          "type": "string"
        },
        "order_type": {
          "type": "string"
        },
        "order_unfilled_size": {
          "type": "string"
        },
        "tfc_used_for_commission": {
          "type": "string"
        },
        "tfc_used_for_liquidation_fee": {
          "type": "string"
        },
        "total_commission_in_settling_asset": {
          "type": "string"
        },
        "total_liquidation_fee_in_settling_asset": {
          "type": "string"
        }
      }
    },
    "OrderLeverage": {
      "type": "object",
      "description": "Order Leverage for a product",
      "properties": {
        "leverage": {
          "type": "string",
          "description": "Leverage of all open orders for this product"
        },
        "order_margin": {
          "type": "string",
          "description": "Margin blocked in open orders for this product"
        },
        "product_id": {
          "type": "integer"
        }
      }
    },
    "L2Orderbook": {
      "type": "object",
      "description": "L2 orderbook",
      "properties": {
        "buy": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "depth": {
                "type": "string",
                "description": "sum of size till that price level"
              },
              "price": {
                "type": "string"
              },
              "size": {
                "type": "integer",
                "description": "for derivatives -> number of contracts, for spot -> amount in underlying"
              }

            }
          }
        },
        "last_updated_at":{
          "type": "integer"
        },
        "sell": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "depth": {
                "type": "string",
                "description": "sum of size till that price level"
              },
              "price": {
                "type": "string"
              },
              "size": {
                "type": "integer",
                "description": "for derivatives -> number of contracts, for spot -> amount in underlying"
              }
            }
          }
        },
        "symbol": {
          "type": "string"
        }
      },
      "example": {
        "buy": [
          {
          "depth": "983",  
          "price": "9187.5",
          "size": 205640
          }
        ],
        "last_updated_at":1654589595784000,
        "sell": [
          {
          "depth": "1185",  
          "price": "9188.0",
          "size": 113752
          }
        ]
        ,"symbol":"BTCUSDT"
      }
    },
    "Trades": {
      "type": "object",
      "description": "trades of a symbol",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "side": {
                "type": "string",
                "enum": [
                  "buy",
                  "sell"
                ]
              },
              "size": {
                "type": "integer"
              },
              "price": {
                "type": "string"
              },
              "timestamp": {
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "Wallet": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "string",
          "description": "Total wallet balance"
        },
        "order_margin": {
          "type": "string",
          "description": "Margin blocked in open orders"
        },
        "position_margin": {
          "type": "string",
          "description": "Margin blocked in open positions"
        },
        "commission": {
          "type": "string",
          "description": "Commissions blocked in open orders and open positions"
        },
        "available_balance": {
          "type": "string",
          "description": "Amount available for withdrawals"
        },
        "interest_credit": {
          "type": "string",
          "description": "Interest credit earned till now"
        },
        "asset_id": {
          "type": "integer"
        },
        "asset_symbol": {
          "type": "string"
        }
      }
    },
    "ArrayOfWallets": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Wallet"
      }
    },
    "AssetTransferSubaccountReq": {
      "type": "object",
      "properties": {
        "transferrer_user_id": {
          "type": "string",
          "description": "Debit account"
        },
        "transferee_user_id": {
          "type": "string",
          "description": "Credit account"
        },
        "asset_symbol": {
          "type": "string",
          "description": "Asset to transfer"
        },
        "amount": {
          "type": "big_decimal",
          "description": "Amount to transfer. Only postive values allowed."
        }
      }
    },
    "SubaccountTransferHistory": {
      "type": "object",
      "properties": {
        "subaccount_user_id": {
          "type": "string",
          "description": "subaccount user id"
        },
        "before": {
          "type": "string",
          "description": "before cursor for pagination"
        },
        "after": {
          "type": "string",
          "description": "after cursor for pagination"
        },
        "page_size": {
          "type": "big_decimal",
          "description": "records per page",
          "default": 10
        }
      }
    },
    "TransactionTypes": {
      "type": "string",
      "properties": {
        "transaction_type": {
          "type": "string",
          "enum": [
            "cashflow",
            "deposit",
            "withdrawal",
            "commission",
            "conversion",
            "funding",
            "settlement",
            "liquidation_fee",
            "spot_trade",
            "withdrawal_cancellation",
            "referral_bonus",
            "sub_account_transfer",
            "commission_rebate",
            "promo_credit",
            "trading_credits",
            "trading_credits_forfeited",
            "trading_credits_paid",
            "trading_fee_credits_paid_liquidation_fee",
            "trading_credits_reverted",
            "interest_credit",
            "external_deposit",
            "credit_line",
            "trading_competition",
            "fund_deposit",
            "fund_withdrawal",
            "fund_wallet_deposit",
            "fund_wallet_withdrawal",
            "fund_reward",
            "trade_farming_reward",
            "interest_credit",
            "revert",
            "raf_bonus",
            "fill_appropriation",
            "incident_compensation"
          ]
        }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "amount": {
          "type": "string",
          "description": "amount credited/debited in this transaction (+ for credited, - for debited)"
        },
        "balance": {
          "type": "string",
          "description": "net wallet balance after this transaction"
        },
        "transaction_type": {
          "$ref": "#/definitions/TransactionTypes"
        },
        "meta_data": {
          "type": "object"
        },
        "product_id": {
          "type": "integer"
        },
        "asset_id": {
          "type": "integer"
        },
        "asset_symbol": {
          "type": "integer"
        },
        "created_at": {
          "type": "string"
        }
      }
    },
    "ArrayOfTransactions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Transaction"
      }
    },
    "SubaccountTransferLog": {
      "type": "object",
      "properties": {
        "transferrer_user_id": {
          "type": "string",
          "description": "User id of the account debited with the asset."
        },
        "transferee_user_id": {
          "type": "string",
          "description": "User id of the account credited with the asset."
        },
        "asset_symbol": {
          "type": "string",
          "description": "Asset symbol transferred."
        },
        "amount": {
          "type": "big_decimal",
          "description": "Amount transferred."
        },
        "created_at": {
          "type": "string",
          "description": "transfer creation date and time"
        },
        "transferee_user": {
          "type": "object",
          "description": "User details"
        },
        "transferrer_user":{
          "type": "object",
          "description": "User details"
        }
      }
    },
    "ArrayOfSubaccountTransferLog": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SubaccountTransferLog"
      }
    },
    "greeks": {
      "type": "object",
      "properties": {
        "delta": {
          "type": "string"
        },
        "gamma": {
          "type": "string"
        },
        "rho": {
          "type": "string"
        },
        "theta": {
          "type": "string"
        },
        "vega": {
          "type": "string"
        }
      }
    },
    "price_band": {
      "type": "object",
      "properties": {
        "lower_limit": {
          "type": "string"
        },
        "upper_limit": {
          "type": "string"
        }
      }
    },
    "quotes": {
      "type": "object",
      "properties": {
        "ask_iv": {
          "type": "string"
        },
        "ask_size": {
          "type": "string"
        },
        "best_ask": {
          "type": "string"
        },
        "best_bid": {
          "type": "string"
        },
        "bid_iv": {
          "type": "string"
        },
        "bid_size": {
          "type": "string"
        }
      }
    },
    "Ticker": {
      "type": "object",
      "properties": {
        "close": {
          "type": "integer"
        },
        "contract_type": {
          "type": "string"
        },
        "greeks": {
          "$ref": "#/definitions/greeks"
        },
        "high": {
          "type": "number"
        },
        "low": {
          "type": "number"
        },
        "mark_price": {
          "type": "string"
        },
        "mark_vol": {
          "type": "string"
        },
        "oi": {
          "type": "string"
        },
        "oi_value": {
          "type": "string"
        },
        "oi_value_symbol": {
          "type": "string"
        },
        "oi_value_usd": {
          "type": "string"
        },
        "open": {
          "type": "number"
        },
        "price_band": {
          "$ref": "#/definitions/price_band"
        },
        "product_id": {
          "type": "number"
        },
        "quotes": {
          "$ref": "#/definitions/quotes"
        },
        "size": {
          "type": "number"
        },
        "spot_price": {
          "type": "string"
        },
        "strike_price": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "timestamp": {
          "type": "number"
        },
        "turnover": {
          "type": "number"
        },
        "turnover_symbol": {
          "type": "string"
        },
        "turnover_usd": {
          "type": "number"
        },
        "volume": {
          "type": "integer"
        }
      }
    },
    "ArrayOfTickers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Ticker"
      }
    },
    "PaginationMeta": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string"
        },
        "before": {
          "type": "string"
        }
      }
    },
    "OHLCData": {
      "type": "object",
      "description": "A ohlc object",
      "properties": {
        "time": {
          "type": "integer"
        },
        "open": {
          "type": "number",
          "format": "float"
        },
        "high": {
          "type": "number"
        },
        "low": {
          "type": "number"
        },
        "close": {
          "type": "number"
        },
        "volume": {
          "type": "number"
        }
      }
    },
    "ArrayOfOHLCData": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/OHLCData"
      }
    },
    "SparklineData": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "integer"
        },
        "description": "array of timestamp and closing value"
      },
      "example": {"MARK:BTCUSD_31Oct": [[1594214051,0.00003826],[1594214051,0.00003826]],"SPOT:BTCUSD_31Oct": [[1594215270,0.00003826]]}
    },
    "Stats":{
      "type": "object",
      "properties": {
        "last_30_days_volume": {
          "type": "integer",
          "description": "sum of turnover usd in the last 30 days"
        },
        "last_7_days_volume": {
          "type": "integer",
          "description": "sum of turnover usd in the last 7 days"
        },
        "total_volume": {
          "type": "integer",
          "description": "sum of turnover usd in the last 24 hours"
        }
      }
    },
    "MMPConfigUpdateRequest": {
      "type": "object",
      "description": "MMP config for an underlying",
      "properties": {
        "asset": {
          "type": "string",
          "required": true
        },
        "window_interval": {
          "type": "integer",
          "description": "Window interval in seconds"
        },
        "freeze_interval": {
          "type": "integer",
          "description": "MMP freeze interval in seconds. Setting this to zero will require a manual reset once mmp is triggered."
        },
        "trade_limit": {
          "type": "string",
          "description": "Notional trade limit for mmp to trigger (in USDT)"
        },
        "delta_limit": {
          "type": "string",
          "description": "Delta Adjusted notional trade limit for mmp to trigger (in USDT)"
        },
        "vega_limit": {
          "type": "string",
          "description": "vega traded limit for mmp to trigger (in USDT)"
        },
        "mmp": {
          "type": "string",
          "description": "Specify mmp flag for the config update",
          "enum": [
            "mmp1",
            "mmp2",
            "mmp3",
            "mmp4",
            "mmp5"
          ]
        }
      }
    },
    "MMPResetRequest": {
      "type": "object",
      "description": "MMP config for an underlying",
      "properties": {
        "asset": {
          "type": "string",
          "required": true
        },
        "mmp": {
          "type": "string",
          "description": "specify mmp flag to reset",
          "enum": [
            "mmp1",
            "mmp2",
            "mmp3",
            "mmp4",
            "mmp5"
          ]
        }
      }
    },
    "UserPreference": {
      "type": "object",
      "description": "User trading preferences",
      "properties": {
        "user_id": {
          "type": "integer"
        },
        "default_auto_topup": {
          "type": "boolean",
          "description": "Default auto topup setting for newly acquired positions (only for isolated mode)"
        },
        "mmp_config": {
          "type": "object",
          "description": "Config object for market maker protection (only for MMP enabled accounts)"
        },
        "deto_for_commission": {
          "type": "boolean",
          "description": "Flag to determine whether to pay commissions in deto"
        },
        "vip_level": {
          "type": "integer",
          "description": "VIP level for this account. Customers get better fee discounting for higher VIP levels"
        }
      }
    },
    "CancelAfterRequest": {
      "type": "object",
      "description": "Cancel After Request Object",
      "properties": {
        "cancel_after": {
          "type": "string",
          "description": "Timer value in milliseconds after which orders are to be cancelled. To disable deadman switch and keep your orders open, set cancel_after to 0."
        }
      },
      "example": { "cancel_after": "5000"}
    },
    "CancelAfterResponse": {
      "type": "object",
      "description": "Cancel After Response Object",
      "properties": {
        "cancel_after_enabled": {
          "type": "string",
          "enum": [
            "false",
            "true"
          ]
        },
        "cancel_after_timestamp": {
          "type": "string",
          "description": "timestamp after which orders will get cancelled"
        }
      },
      "example": { "cancel_after_enabled": "true", "cancel_after_timestamp": "1669119262000"}
    },
    "User": {
      "type": "object",
      "description": "User Object",
      "properties": {
        "id": {
          "type": "integer_or_string",
          "description": "id"
        },
        "email": {
          "type": "string",
          "description": "email"
        },
        "account_name": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "dob": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "margin_mode": {
          "type": "string"
        },
        "pf_index_symbol": {
          "type": "string",
          "description": "Portfolio index symbol if account is at portfolio margin mode."
        },
        "is_sub_account": {
          "type": "boolean"
        },
        "is_kyc_done": {
          "type": "boolean"
        }
      }
    },
    "ArrayOfSubaccouns": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    }
  }
}